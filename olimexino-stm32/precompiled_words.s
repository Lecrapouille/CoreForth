
    defword "REGISTER", REGISTER, 0x0
    .word CREATE, COMMA, LPARENDOESGTRPAREN
    .set REGISTER_XT, .
    .word 0x47884900, DODOES + 1, FETCH, PLUS, EXIT

    defword "SET-BITS", SET_BITS, 0x0
    .word DUP, FETCH, ROT, OR, SWAP, STORE, EXIT

    defword "CLEAR-BITS", CLEAR_BITS, 0x0
    .word DUP, FETCH, ROT, INVERT, AND, SWAP, STORE, EXIT

    defconst "HIGH", HIGH, 0x1


    defconst "LOW", LOW, 0x0


    defconst "ENABLE", ENABLE, 0x1


    defconst "DISABLE", DISABLE, 0x0


    defconst "ON", ON, 0x1


    defconst "OFF", OFF, 0x0


    defconst "NVIC", NVIC, 0xE000E000


    defword "NVIC-SETENA-BASE", NVIC_SETENA_BASE, 0x0, REGISTER_XT
    .word 0x100

    defword "NVIC-ACTIVE-BASE", NVIC_ACTIVE_BASE, 0x0, REGISTER_XT
    .word 0x300

    defconst "RCC", RCC, 0x40021000


    defconst "RCC-CR", RCC_CR, 0x40021000


    defconst "RCC-CFGR", RCC_CFGR, 0x40021004


    defconst "RCC-CIR", RCC_CIR, 0x40021008


    defconst "RCC-APB2RSTR", RCC_APBTWORSTR, 0x4002100C


    defconst "RCC-APB1RSTR", RCC_APBONERSTR, 0x40021010


    defconst "RCC-AHBENR", RCC_AHBENR, 0x40021014


    defconst "RCC-APB2ENR", RCC_APBTWOENR, 0x40021018


    defconst "RCC-APB1ENR", RCC_APBONEENR, 0x4002101C


    defconst "RCC-BDCR", RCC_BDCR, 0x40021020


    defconst "RCC-CSR", RCC_CSR, 0x40021024


    defconst "RCC-AHBRSTR", RCC_AHBRSTR, 0x40021028


    defconst "RCC-CFGR2", RCC_CFGRTWO, 0x4002102C


    defconst "GPIOA", GPIOA, 0x40010800


    defconst "GPIOB", GPIOB, 0x40010C00


    defconst "GPIOC", GPIOC, 0x40011000


    defconst "GPIOD", GPIOD, 0x40011400


    defconst "GPIOE", GPIOE, 0x40011800


    defconst "GPIOF", GPIOF, 0x40011C00


    defconst "GPIOG", GPIOG, 0x40012000


    defword "GPIO-CRL", GPIO_CRL, 0x0, REGISTER_XT
    .word 0x0

    defword "GPIO-CRH", GPIO_CRH, 0x0, REGISTER_XT
    .word 0x4

    defword "GPIO-IDR", GPIO_IDR, 0x0, REGISTER_XT
    .word 0x8

    defword "GPIO-ODR", GPIO_ODR, 0x0, REGISTER_XT
    .word 0xC

    defword "GPIO-BSRR", GPIO_BSRR, 0x0, REGISTER_XT
    .word 0x10

    defword "GPIO-BRR", GPIO_BRR, 0x0, REGISTER_XT
    .word 0x14

    defword "GPIO-LCKR", GPIO_LCKR, 0x0, REGISTER_XT
    .word 0x18

    defconst "STCTRL", STCTRL, 0xE000E010


    defconst "STRELOAD", STRELOAD, 0xE000E014


    defconst "STCURRENT", STCURRENT, 0xE000E018


    defconst "I2C1", ITWOCONE, 0x40005400


    defconst "I2C2", ITWOCTWO, 0x40005800


    defword "I2C-CR1", ITWOC_CRONE, 0x0, REGISTER_XT
    .word 0x4

    defword "I2C-CR2", ITWOC_CRTWO, 0x0, REGISTER_XT
    .word 0x8

    defword "I2C-OAR1", ITWOC_OARONE, 0x0, REGISTER_XT
    .word 0xC

    defword "I2C-OAR2", ITWOC_OARTWO, 0x0, REGISTER_XT
    .word 0x10

    defword "I2C-SR1", ITWOC_SRONE, 0x0, REGISTER_XT
    .word 0x14

    defword "I2C-SR2", ITWOC_SRTWO, 0x0, REGISTER_XT
    .word 0x18

    defword "I2C-CCR", ITWOC_CCR, 0x0, REGISTER_XT
    .word 0x1C

    defword "I2C-TRISE", ITWOC_TRISE, 0x0, REGISTER_XT
    .word 0x20

    defconst "SPI1", SPIONE, 0x40013000


    defconst "SPI2", SPITWO, 0x40003800


    defword "SPI-CR1", SPI_CRONE, 0x0, REGISTER_XT
    .word 0x0

    defword "SPI-CR2", SPI_CRTWO, 0x0, REGISTER_XT
    .word 0x4

    defword "SPI-SR", SPI_SR, 0x0, REGISTER_XT
    .word 0x8

    defword "SPI-DR", SPI_DR, 0x0, REGISTER_XT
    .word 0xC

    defword "SPI-CRCPR", SPI_CRCPR, 0x0, REGISTER_XT
    .word 0x10

    defword "SPI-RXCRCPR", SPI_RXCRCPR, 0x0, REGISTER_XT
    .word 0x14

    defword "SPI-TXCRCPR", SPI_TXCRCPR, 0x0, REGISTER_XT
    .word 0x18

    defword "SPI-I2SCFGR", SPI_ITWOSCFGR, 0x0, REGISTER_XT
    .word 0x1C

    defword "SPI-I2SPR", SPI_ITWOSPR, 0x0, REGISTER_XT
    .word 0x20

    defconst "FLASH-ACR", FLASH_ACR, 0x40022000


    defconst "FLASH-KEYR", FLASH_KEYR, 0x40022004


    defconst "FLASH-OPTKEYR", FLASH_OPTKEYR, 0x40022008


    defconst "FLASH-SR", FLASH_SR, 0x4002200C


    defconst "FLASH-CR", FLASH_CR, 0x40022010


    defconst "FLASH-AR", FLASH_AR, 0x40022014


    defconst "FLASH-OBR", FLASH_OBR, 0x4002201C


    defconst "FLASH-WRPR", FLASH_WRPR, 0x40022020


    defconst "USB-EP0R", USB_EPZR, 0x40005C00


    defconst "USB-EP1R", USB_EPONER, 0x40005C04


    defconst "USB-EP2R", USB_EPTWOR, 0x40005C08


    defconst "USB-EP3R", USB_EP3R, 0x40005C0C


    defconst "USB-EP4R", USB_EPFOURR, 0x40005C10


    defconst "USB-EP5R", USB_EP5R, 0x40005C14


    defconst "USB-EP6R", USB_EP6R, 0x40005C18


    defconst "USB-EP7R", USB_EP7R, 0x40005C1C


    defconst "USB-CNTR", USB_CNTR, 0x40005C40


    defconst "USB-ISTR", USB_ISTR, 0x40005C44


    defconst "USB-FNR", USB_FNR, 0x40005C48


    defconst "USB-DADDR", USB_DADDR, 0x40005C4C


    defconst "USB-BTABLE", USB_BTABLE, 0x40005C50


    defconst "USB-PMA", USB_PMA, 0x40006000


    defconst "UART1", UARTONE, 0x40013800


    defconst "UART2", UARTTWO, 0x40004400


    defconst "UART3", UART3, 0x40004800


    defword "UART-SR", UART_SR, 0x0, REGISTER_XT
    .word 0x0

    defword "UART-DR", UART_DR, 0x0, REGISTER_XT
    .word 0x4

    defword "UART-BRR", UART_BRR, 0x0, REGISTER_XT
    .word 0x8

    defword "UART-CR1", UART_CRONE, 0x0, REGISTER_XT
    .word 0xC

    defword "UART-CR2", UART_CRTWO, 0x0, REGISTER_XT
    .word 0x10

    defword "UART-CR3", UART_CR3, 0x0, REGISTER_XT
    .word 0x14

    defword "UART-GPTR", UART_GPTR, 0x0, REGISTER_XT
    .word 0x18

    defword "LED-GREEN-ENABLE", LED_GREEN_ENABLE, 0x0
    .word GPIOA, GPIO_CRL, DUP, FETCH, LIT, 0xFF0FFFFF, AND, LIT, 0x100000, OR, SWAP, STORE, EXIT

    defword "LED-GREEN!", LED_GREENSTORE, 0x0
    .word CELLS, GPIOA, GPIO_BRR, SWAP, MINUS, LIT, 0x20, SWAP, STORE, EXIT

    defword "SPI-ENABLE", SPI_ENABLE, 0x0
    .word GPIOB, GPIO_CRH, DUP, FETCH, LIT, 0xFFFF, AND, LIT, 0xB4B30000, OR, SWAP, STORE, LIT, 0x4, SPITWO, SPI_CRTWO, STORE, LIT, 0x27C, SPITWO, SPI_CRONE, STORE, EXIT

    defword "SPI-CS!", SPI_CSSTORE, 0x0
    .word CELLS, NEGATE, GPIOB, GPIO_BRR, PLUS, LIT, 0x1000, SWAP, STORE, EXIT

    defword "SPI-RXNE?", SPI_RXNEQ, 0x0
    .word SPITWO, SPI_SR, FETCH, LIT, 0x1, AND, EXIT

    defword "SPI-TXNE?", SPI_TXNEQ, 0x0
    .word SPITWO, SPI_SR, FETCH, LIT, 0x2, AND, INVERT, EXIT

    defword "SPI-WAIT-RXNE", SPI_WAIT_RXNE, 0x0
    .word SPITWO, SPI_SR, DUP, FETCH, LIT, 0x1, AND, QBRANCH, 0xFFFFFFE8, DROP, EXIT

    defword "SPI-WAIT-TXE", SPI_WAIT_TXE, 0x0
    .word SPITWO, SPI_SR, DUP, FETCH, LIT, 0x2, AND, QBRANCH, 0xFFFFFFE8, DROP, EXIT

    defword "SPI-DR!@", SPI_DRSTOREFETCH, 0x0
    .word SPI_WAIT_TXE, SPITWO, SPI_DR, TUCK, STORE, SPI_WAIT_RXNE, FETCH, EXIT

    defword "SPI-DR!", SPI_DRSTORE, 0x0
    .word SPI_DRSTOREFETCH, DROP, EXIT

    defword "SPI-DR@", SPI_DRFETCH, 0x0
    .word SPI_WAIT_RXNE, SPITWO, SPI_DR, FETCH, EXIT

    defword "MMC-SPI-MODE", MMC_SPI_MODE, 0x0
    .word HIGH, SPI_CSSTORE, LIT, 0xA, LIT, 0x0, LPARENDORPAREN, LIT, 0xFF, SPI_DRSTORE, LPARENLOOPRPAREN, QBRANCH, 0xFFFFFFEC, LOW, SPI_CSSTORE, EXIT

    defword "MMC-CMD", MMC_CMD, 0x0
    .word SWAP, DUP, ZEQU, LIT, 0x94, AND, ONEPLUS, MINUSROT, LIT, 0x40, OR, SPI_DRSTORE, CHEW, SPI_DRSTORE, SPI_DRSTORE, SPI_DRSTORE, SPI_DRSTORE, SPI_DRSTORE, EXIT

    defword "MMC-RES-1", MMC_RES_ONE, 0x0
    .word LIT, 0xFF, DUP, SPI_DRSTOREFETCH, DUP, LIT, 0xFF, LTGT, QBRANCH, 0xFFFFFFE8, SWAP, DROP, EXIT

    defword "MMC-INIT", MMC_INIT, 0x0
    .word SPI_ENABLE, MMC_SPI_MODE, LIT, 0x0, LIT, 0x0, MMC_CMD, MMC_RES_ONE, DROP, LIT, 0x1, LIT, 0x0, MMC_CMD, MMC_RES_ONE, ZEQU, QBRANCH, 0xFFFFFFE0, EXIT

    defword "MMC-READ-BLK", MMC_READ_BLK, 0x0
    .word LIT, 0x200, MUL, LIT, 0x11, SWAP, MMC_CMD, MMC_RES_ONE, QBRANCH, 0x10, LIT, 0x0, EXIT, MMC_RES_ONE, LIT, 0xFE, LTGT, QBRANCH, 0x10, LIT, 0x0, EXIT, LIT, 0x200, LIT, 0x0, LPARENDORPAREN, DUP, LIT, 0xFF, SPI_DRSTOREFETCH, SWAP, CSTORE, ONEPLUS, LPARENLOOPRPAREN, QBRANCH, 0xFFFFFFDC, DROP, LIT, 0xFF, DUP, SPI_DRSTORE, SPI_DRSTORE, LIT, 0x200, EXIT

    defword "MMC-WRITE-BLK", MMC_WRITE_BLK, 0x0
    .word LIT, 0x200, MUL, LIT, 0x18, SWAP, MMC_CMD, MMC_RES_ONE, DROP, LIT, 0xFF, SPI_DRSTORE, LIT, 0xFE, SPI_DRSTORE, LIT, 0x200, LIT, 0x0, LPARENDORPAREN, DUP, CFETCH, SPI_DRSTORE, ONEPLUS, LPARENLOOPRPAREN, QBRANCH, 0xFFFFFFE8, DROP, LIT, 0xFF, DUP, SPI_DRSTORE, SPI_DRSTORE, LIT, 0xFF, SPI_DRSTOREFETCH, LIT, 0x1F, AND, LIT, 0x5, EQU, LIT, 0xFF, DUP, DUP, SPI_DRSTOREFETCH, EQU, QBRANCH, 0xFFFFFFEC, DROP, EXIT

    defword "(MMC-BLOCK)", LPARENMMC_BLOCKRPAREN, 0x0
    .word TWOMUL, TWODUP, MMC_READ_BLK, DROP, ONEPLUS, SWAP, LIT, 0x200, PLUS, SWAP, MMC_READ_BLK, DROP, EXIT

    defword "(MMC-UPDATE)", LPARENMMC_UPDATERPAREN, 0x0
    .word TWOMUL, TWODUP, MMC_WRITE_BLK, DROP, ONEPLUS, SWAP, LIT, 0x200, PLUS, SWAP, MMC_WRITE_BLK, DROP, EXIT

    defconst "FLASH-START", FLASH_START, 0x8010000


    defword "BLOCK>FLASH", BLOCKGTFLASH, 0x0
    .word CSLASHBLK, MUL, FLASH_START, PLUS, EXIT

    defvar "((BLOCK))", LPARENLPARENBLOCKRPARENRPAREN, 0x400


    defword "(BLOCK)", LPARENBLOCKRPAREN, 0x0
    .word BLOCKGTFLASH, SWAP, CSLASHBLK, CMOVE, EXIT

    defword "(UPDATE)", LPARENUPDATERPAREN, 0x0
    .word BLOCKGTFLASH, DUP, ERASE_PAGE, FLASH_PAGE, EXIT

    defvar "USB-CTR-HANDLERS", USB_CTR_HANDLERS, 0x20


    defconst "USB-DEFAULT-IRQMASK", USB_DEFAULT_IRQMASK, 0xBD00


    defword "USB-PMA-PTR", USB_PMA_PTR, 0x0
    .word TWOMUL, USB_PMA, PLUS, EXIT

    defword "USB-BTABLE-PTR", USB_BTABLE_PTR, 0x0
    .word USB_BTABLE, FETCH, PLUS, USB_PMA_PTR, EXIT

    defword "(USB-BTABLE-TX)", LPARENUSB_BTABLE_TXRPAREN, 0x0
    .word LIT, 0x8, MUL, USB_BTABLE_PTR, EXIT

    defword "USB-BTABLE-TX", USB_BTABLE_TX, 0x0
    .word LPARENUSB_BTABLE_TXRPAREN, FETCH, USB_PMA_PTR, EXIT

    defword "USB-BTABLE-TX#", USB_BTABLE_TXNUM, 0x0
    .word LIT, 0x8, MUL, LIT, 0x2, PLUS, USB_BTABLE_PTR, EXIT

    defword "(USB-BTABLE-RX)", LPARENUSB_BTABLE_RXRPAREN, 0x0
    .word LIT, 0x8, MUL, LIT, 0x4, PLUS, USB_BTABLE_PTR, EXIT

    defword "USB-BTABLE-RX", USB_BTABLE_RX, 0x0
    .word LPARENUSB_BTABLE_RXRPAREN, FETCH, USB_PMA_PTR, EXIT

    defword "USB-BTABLE-RX#", USB_BTABLE_RXNUM, 0x0
    .word LIT, 0x8, MUL, LIT, 0x6, PLUS, USB_BTABLE_PTR, EXIT

    defword "PMA>", PMAGT, 0x0
    .word LIT, 0x0, LPARENDORPAREN, OVER, CFETCH, OVER, CSTORE, ONEPLUS, SWAP, ONEPLUS, I, ONEMINUS, LIT, 0x1, AND, ZEQU, QBRANCH, 0x10, LIT, 0x2, PLUS, SWAP, LPARENLOOPRPAREN, QBRANCH, 0xFFFFFFAC, TWODROP, EXIT

    defword ">PMA", GTPMA, 0x0
    .word DUP, LIT, 0x1, AND, GTR, TWOSLASH, LIT, 0x0, LPARENDORPAREN, OVER, HFETCH, OVER, HSTORE, CELL, PLUS, SWAP, LIT, 0x2, PLUS, SWAP, LPARENLOOPRPAREN, QBRANCH, 0xFFFFFFCC, RGT, QBRANCH, 0x1C, SWAP, CFETCH, SWAP, CSTORE, BRANCH, 0x8, TWODROP, EXIT

    defword "USB-DISC-CONFIG", USB_DISC_CONFIG, 0x0
    .word GPIOC, GPIO_CRH, DUP, FETCH, LIT, 0xFFF0FFFF, AND, LIT, 0xFFF3FFFF, OR, SWAP, STORE, EXIT

    defword "USB-DISC!", USB_DISCSTORE, 0x0
    .word CELLS, GPIOC, GPIO_BRR, SWAP, MINUS, LIT, 0x1000, SWAP, STORE, EXIT

    defword "USB-RESET", USB_RESET, 0x0
    .word LIT, 0x0, USB_BTABLE, STORE, USB_PMA, LIT, 0x400, LIT, 0x0, FILL, LIT, 0x3210, USB_EPZR, STORE, LIT, 0x40, LIT, 0x0, LPARENUSB_BTABLE_RXRPAREN, HSTORE, LIT, 0x8400, LIT, 0x0, USB_BTABLE_RXNUM, HSTORE, LIT, 0x80, LIT, 0x0, LPARENUSB_BTABLE_TXRPAREN, HSTORE, LIT, 0x0, LIT, 0x0, USB_BTABLE_TXNUM, HSTORE, LIT, 0x20, USB_EPONER, STORE, LIT, 0xC0, LIT, 0x1, LPARENUSB_BTABLE_TXRPAREN, HSTORE, LIT, 0x0, LIT, 0x1, USB_BTABLE_TXNUM, HSTORE, LIT, 0x620, USB_EPTWOR, STORE, LIT, 0x100, LIT, 0x2, LPARENUSB_BTABLE_TXRPAREN, HSTORE, LIT, 0x0, LIT, 0x2, USB_BTABLE_TXNUM, HSTORE, LIT, 0x3000, USB_EP3R, STORE, LIT, 0x110, LIT, 0x3, LPARENUSB_BTABLE_RXRPAREN, HSTORE, LIT, 0x8400, LIT, 0x3, USB_BTABLE_RXNUM, HSTORE, LIT, 0x80, USB_DADDR, STORE, EXIT

    defword "USB-SUSPEND", USB_SUSPEND, 0x0
    .word LIT, 0xC, USB_CNTR, SET_BITS, EXIT

    defword "USB-WAKE", USB_WAKE, 0x0
    .word LIT, 0x4, USB_CNTR, CLEAR_BITS, USB_DEFAULT_IRQMASK, USB_CNTR, STORE, EXIT

    defword "USB-DEFAULT-CTR", USB_DEFAULT_CTR, 0x0
    .word CR, LPARENSQUOTRPAREN, 0x52494405, 0x203A, TYPE, DOT, LPARENSQUOTRPAREN, 0x3A504504, 0x20, TYPE, DUP, DOT, LPARENSQUOTRPAREN, 0x78504506, 0x203A52, TYPE, DUP, CELLS, USB_EPZR, PLUS, FETCH, DOT, DUP, USB_BTABLE_RX, OVER, USB_BTABLE_RXNUM, FETCH, LIT, 