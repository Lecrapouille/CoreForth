HEX

: REGISTER   CREATE , DOES> @ + ;
: SET-BITS   DUP @ ROT OR SWAP ! ;
: CLEAR-BITS   DUP @ ROT INVERT AND SWAP ! ;

1 CONSTANT HIGH
0 CONSTANT LOW
1 CONSTANT ENABLE
0 CONSTANT DISABLE
1 CONSTANT ON
0 CONSTANT OFF

E000E000 CONSTANT NVIC
100 REGISTER NVIC-SETENA-BASE
300 REGISTER NVIC-ACTIVE-BASE

40021000 CONSTANT RCC
40021000 CONSTANT RCC-CR
40021004 CONSTANT RCC-CFGR
40021008 CONSTANT RCC-CIR
4002100C CONSTANT RCC-APB2RSTR
40021010 CONSTANT RCC-APB1RSTR
40021014 CONSTANT RCC-AHBENR
40021018 CONSTANT RCC-APB2ENR
4002101C CONSTANT RCC-APB1ENR
40021020 CONSTANT RCC-BDCR
40021024 CONSTANT RCC-CSR
40021028 CONSTANT RCC-AHBRSTR
4002102C CONSTANT RCC-CFGR2

40010800 CONSTANT GPIOA
40010C00 CONSTANT GPIOB
40011000 CONSTANT GPIOC
40011400 CONSTANT GPIOD
40011800 CONSTANT GPIOE
40011C00 CONSTANT GPIOF
40012000 CONSTANT GPIOG
000 REGISTER GPIO-CRL
004 REGISTER GPIO-CRH
008 REGISTER GPIO-IDR
00C REGISTER GPIO-ODR
010 REGISTER GPIO-BSRR
014 REGISTER GPIO-BRR
018 REGISTER GPIO-LCKR

E000E010 CONSTANT STCTRL
E000E014 CONSTANT STRELOAD
E000E018 CONSTANT STCURRENT

40005400 CONSTANT I2C1
40005800 CONSTANT I2C2
004 REGISTER I2C-CR1
008 REGISTER I2C-CR2
00C REGISTER I2C-OAR1
010 REGISTER I2C-OAR2
014 REGISTER I2C-SR1
018 REGISTER I2C-SR2
01C REGISTER I2C-CCR
020 REGISTER I2C-TRISE

40013000 CONSTANT SPI1
40003800 CONSTANT SPI2
000 REGISTER SPI-CR1
004 REGISTER SPI-CR2
008 REGISTER SPI-SR
00C REGISTER SPI-DR
010 REGISTER SPI-CRCPR
014 REGISTER SPI-RXCRCPR
018 REGISTER SPI-TXCRCPR
01C REGISTER SPI-I2SCFGR
020 REGISTER SPI-I2SPR

40022000 CONSTANT FLASH-ACR
40022004 CONSTANT FLASH-KEYR
40022008 CONSTANT FLASH-OPTKEYR
4002200C CONSTANT FLASH-SR
40022010 CONSTANT FLASH-CR
40022014 CONSTANT FLASH-AR
4002201C CONSTANT FLASH-OBR
40022020 CONSTANT FLASH-WRPR

40005C00 CONSTANT USB-EP0R
40005C04 CONSTANT USB-EP1R
40005C08 CONSTANT USB-EP2R
40005C0C CONSTANT USB-EP3R
40005C10 CONSTANT USB-EP4R
40005C14 CONSTANT USB-EP5R
40005C18 CONSTANT USB-EP6R
40005C1C CONSTANT USB-EP7R
40005C40 CONSTANT USB-CNTR
40005C44 CONSTANT USB-ISTR
40005C48 CONSTANT USB-FNR
40005C4C CONSTANT USB-DADDR
40005C50 CONSTANT USB-BTABLE
40006000 CONSTANT USB-PMA

40013800 CONSTANT UART1
40004400 CONSTANT UART2
40004800 CONSTANT UART3
00 REGISTER UART-SR
04 REGISTER UART-DR
08 REGISTER UART-BRR
0C REGISTER UART-CR1
10 REGISTER UART-CR2
14 REGISTER UART-CR3
18 REGISTER UART-GPTR

: LED-GREEN-ENABLE
    GPIOA GPIO-CRL
    DUP @ FF0FFFFF AND 00100000 OR SWAP ! ;

: LED-GREEN!
    CELLS GPIOA GPIO-BRR SWAP - 00000020 SWAP ! ;

: SPI-ENABLE
    GPIOB GPIO-CRH DUP @ 0000FFFF AND B4B30000 OR SWAP !
    4 SPI2 SPI-CR2 !
    27C SPI2 SPI-CR1 ! ;

: SPI-CS!   CELLS NEGATE GPIOB GPIO-BRR + 00001000 SWAP ! ;

: SPI-RXNE?   SPI2 SPI-SR @ 1 AND ;
: SPI-TXNE?   SPI2 SPI-SR @ 2 AND INVERT ;
: SPI-WAIT-RXNE   SPI2 SPI-SR BEGIN DUP @ 1 AND UNTIL DROP ;
: SPI-WAIT-TXE   SPI2 SPI-SR BEGIN DUP @ 2 AND UNTIL DROP ;
: SPI-DR!@   SPI-WAIT-TXE   SPI2 SPI-DR TUCK !   SPI-WAIT-RXNE   @ ;
: SPI-DR!   SPI-DR!@ DROP ;
: SPI-DR@   SPI-WAIT-RXNE   SPI2 SPI-DR @ ;

: MMC-SPI-MODE
    HIGH SPI-CS!
    0A 0 DO 0FF SPI-DR! LOOP
    LOW SPI-CS! ;

: MMC-CMD
    SWAP DUP 0= 094 AND 1+ -ROT
    40 OR SPI-DR!
    CHEW SPI-DR! SPI-DR! SPI-DR! SPI-DR!
    SPI-DR! ;

: MMC-RES-1
    0FF DUP BEGIN SPI-DR!@ DUP 0FF <> UNTIL SWAP DROP ;

: MMC-INIT
    SPI-ENABLE   MMC-SPI-MODE
    0 0 MMC-CMD MMC-RES-1 DROP
    BEGIN 1 0 MMC-CMD MMC-RES-1 0= UNTIL ;

: MMC-READ-BLK
    200 * 11 SWAP MMC-CMD
    MMC-RES-1 IF 0 EXIT THEN
    MMC-RES-1 0FE <> IF 0 EXIT THEN
    200 0 DO DUP 0FF SPI-DR!@ SWAP C! 1+ LOOP DROP
    0FF DUP SPI-DR! SPI-DR!   \ Drop CRC
    200 ;

: MMC-WRITE-BLK
    200 * 18 SWAP MMC-CMD   MMC-RES-1 DROP  0FF SPI-DR!   \ Seek to sector
    0FE SPI-DR!                                 \ Indicate data start
    200 0 DO DUP C@ SPI-DR! 1+ LOOP DROP        \ Write data
    0FF DUP SPI-DR! SPI-DR!                     \ Dummy CRC
    0FF SPI-DR!@ 1F AND 5 =                     \ Get result
    0FF BEGIN DUP DUP SPI-DR!@ = UNTIL DROP ;   \ Loop until idle

: (MMC-BLOCK)
    2* 2DUP MMC-READ-BLK DROP
    1+ SWAP 200 + SWAP MMC-READ-BLK DROP ;

: (MMC-UPDATE)
    2* 2DUP MMC-WRITE-BLK DROP
    1+ SWAP 200 + SWAP MMC-WRITE-BLK DROP ;

08010000 CONSTANT FLASH-START
: BLOCK>FLASH   C/BLK * FLASH-START + ;

CREATE ((BLOCK)) C/BLK ALLOT

: (BLOCK) ( addr blk# -- )
    BLOCK>FLASH SWAP C/BLK CMOVE ;
: (UPDATE) ( addr blk# -- )
    BLOCK>FLASH DUP ERASE-PAGE  FLASH-PAGE ;

CREATE USB-CTR-HANDLERS 8 CELLS ALLOT
0BD00 CONSTANT USB-DEFAULT-IRQMASK

: USB-PMA-PTR ( offset -- pma )   2* USB-PMA + ;
: USB-BTABLE-PTR  ( offset -- btable )   USB-BTABLE @ + USB-PMA-PTR ;
: (USB-BTABLE-TX)  ( ep -- tx-offset ) 8 * USB-BTABLE-PTR ;
: USB-BTABLE-TX  ( ep -- tx-addr ) (USB-BTABLE-TX) @ USB-PMA-PTR ;
: USB-BTABLE-TX#  ( ep -- rx#-addr ) 8 * 2 + USB-BTABLE-PTR ;
: (USB-BTABLE-RX)  ( ep -- rx-offset ) 8 * 4 + USB-BTABLE-PTR ;
: USB-BTABLE-RX  ( ep -- rx-addr ) (USB-BTABLE-RX) @ USB-PMA-PTR ;
: USB-BTABLE-RX#  ( ep -- rx#-addr ) 8 * 6 + USB-BTABLE-PTR ;
: PMA> ( pma buffer c -- )   0 DO OVER C@ OVER C!  1+ SWAP   1+ I 1- 1 AND 0= IF 2 + THEN SWAP   LOOP 2DROP ;
: >PMA ( buffer pma c -- )
    DUP 1 AND >R
    2/ 0 DO OVER H@ OVER H! CELL + SWAP 2 + SWAP LOOP
    R> IF SWAP C@ SWAP C! ELSE 2DROP THEN
    ;

: USB-DISC-CONFIG  GPIOC GPIO-CRH DUP @ $FFF0FFFF AND $FFF3FFFF OR SWAP ! ;
: USB-DISC!
    CELLS GPIOC GPIO-BRR SWAP - $00001000 SWAP ! ;
: USB-RESET
    0 USB-BTABLE !   USB-PMA 400 0 FILL
    3210 USB-EP0R !    40 0 (USB-BTABLE-RX) H! 8400 0 USB-BTABLE-RX# H!
                       80 0 (USB-BTABLE-TX) H!    0 0 USB-BTABLE-TX# H!
    0020 USB-EP1R !   0C0 1 (USB-BTABLE-TX) H!    0 1 USB-BTABLE-TX# H!
    0620 USB-EP2R !   100 2 (USB-BTABLE-TX) H!    0 2 USB-BTABLE-TX# H!
    3000 USB-EP3R !   110 3 (USB-BTABLE-RX) H! 8400 3 USB-BTABLE-RX# H!
    80 USB-DADDR ! ;
: USB-SUSPEND
    0C USB-CNTR SET-BITS ;
: USB-WAKE
    4 USB-CNTR CLEAR-BITS   USB-DEFAULT-IRQMASK USB-CNTR ! ;
: USB-DEFAULT-CTR
    CR ." DIR: " . ." EP: " DUP . ." EPxR: " DUP CELLS USB-EP0R + @ .
    DUP USB-BTABLE-RX OVER USB-BTABLE-RX# @ 3FF AND 2* DUMP
    CELLS USB-EP0R + DUP @ 0F0F AND SWAP ! ;
: USB-CTR
    USB-ISTR @ DUP 0F AND SWAP 10 AND
    OVER CELLS USB-CTR-HANDLERS + @
    ?DUP IF EXECUTE ELSE USB-DEFAULT-CTR THEN ;
: USB-IRQ
    0 USB-ISTR DUP @
    400 OVER AND IF USB-RESET THEN
    800 OVER AND IF USB-SUSPEND THEN
    1000 OVER AND IF USB-WAKE THEN
    8000 AND IF USB-CTR THEN
    ! ;I
: USB-SET-IRQ-HANDLER
    ['] USB-IRQ DUP   $22 CELLS IVT + !   $23 CELLS IVT + ! ;
: USB-INIT
    USB-DISC-CONFIG   1 USB-DISC!
    USB-SET-IRQ-HANDLER   USB-CTR-HANDLERS 8 CELLS 0 FILL ;
: USB-ENABLE
    0 USB-DISC!
    00180000 NVIC NVIC-SETENA-BASE SET-BITS
    1 USB-CNTR !      0 USB-CNTR !   0 USB-ISTR !
    1C00 USB-CNTR !   0 USB-ISTR !
    USB-DEFAULT-IRQMASK USB-CNTR !  ;

: USB-PMA! ( c addr -- addr' )
    TUCK
    DUP 1 AND IF SWAP OVER 1- C@ 8 ROTATE + SWAP THEN H!
    1+ DUP 3 AND 2 = 2 AND +
    ;
: CON-TX#   CON-TX-HEAD @ CON-TX-TAIL @ - DUP 0< 40 AND + ;
: CON-TX-FULL?   CON-TX# 3F = ;
: CON-TX-SPACE   3F CON-TX# - ;
: CON-TX>PMA ( ep -- )
    CON-TX# OVER USB-BTABLE-TX# !
    USB-BTABLE-TX
    CON-TX-TAIL @
    BEGIN
        DUP CON-TX-HEAD @ <> WHILE
        DUP CON-TX + C@   ROT USB-PMA! SWAP
        1+ 3F AND
    REPEAT
    CON-TX-TAIL ! DROP
    ;

DATA NULL$
     00 C,

DATA DEVICE$
     12 C,  01 C,  10 C,  01 C,  02 C,  00 C,  00 C,  40 C,  0BA C,  15 C,  4E C,  0C0 C,  00 C,  01 C,  01 C,  02 C,
     00 C,  01 C,

DATA CONFIG$
     09 C,  02 C,  3E C,  00 C,  02 C,  01 C,  00 C, 0C0 C,  80 C,
     09 C,  04 C,  00 C,  00 C,  01 C,  02 C,  02 C,  01 C,  00 C,
\    05 C,  24 C,  00 C,  01 C,  10 C,
     05 C,  24 C,  01 C,  00 C,  01 C,
     04 C,  24 C,  02 C,  06 C,
     05 C,  24 C,  06 C,  00 C,  01 C,
     07 C,  05 C,  82 C,  03 C,  40 C,  00 C, 0FF C,
     09 C,  04 C,  01 C,  00 C,  02 C,  0A C,  00 C,  00 C,  00 C,
     07 C,  05 C,  03 C,  02 C,  40 C,  00 C,  00 C,
     07 C,  05 C,  81 C,  02 C,  40 C,  00 C,  00 C,  00 C,

DATA MANUFACTURER$
     0E C,  03 C,  4F C,  00 C,  6C C,  00 C,  69 C,  00 C,  6D C,  00 C,  65 C,  00 C,  78 C,  00 C,

DATA PRODUCT$
     20 C,  03 C,  4F C,  00 C,  6C C,  00 C,  69 C,  00 C,  6D C,  00 C,  65 C,  00 C,  78 C,  00 C,  69 C,  00 C,
     6E C,  00 C,  6F C,  00 C,  2D C,  00 C,  53 C,  00 C,  54 C,  00 C,  4D C,  00 C,  33 C,  00 C,  32 C,  00 C,

DATA LINE-CODING$
     00 C, 0C2 C,
     01 C,  00 C,
     01 C,  00 C,
     08 C,  00 C,

: STRING$   1 = IF MANUFACTURER$ ELSE PRODUCT$ THEN ;

: SLICE   CREATE 2 CELLS ALLOT ;
: SLICE!   TUCK CELL + ! ! ;
: SLICE#   CELL + @ ;
: SLICE@   DUP @ SWAP SLICE# ;
: SLICE#!   CELL + ! ;
: /SLICE   2DUP +! CELL + -! ;

SLICE EP0-PENDING
VARIABLE EP0-REQ-TYPE
VARIABLE EP0-REQ
VARIABLE EP0-REQ-VALUE0
VARIABLE EP0-REQ-VALUE1
VARIABLE EP0-REQ-INDEX
VARIABLE EP0-REQ-LENGTH

: EP-TX-STATE! ( state ep -- )
    CELLS USB-EP0R + DUP @ 08FBF AND 8080 OR ROT 4 ROTATE XOR SWAP ! ;
: EP-RX-STATE! ( state ep -- )
    CELLS USB-EP0R + DUP @ 0BF8F AND 8080 OR ROT 0C ROTATE XOR SWAP ! ;

: EP-CLEAR-CTR ( ep mask -- )   SWAP CELLS USB-EP0R + DUP @ ROT AND SWAP ! ;
: EP-CLEAR-CTR-TX ( ep -- )   08F0F EP-CLEAR-CTR ;
: EP-CLEAR-CTR-RX ( ep -- )   00F8F EP-CLEAR-CTR ;
: EP-SET-ADDRESS ( addr ep -- )   CELLS USB-EP0R + TUCK @ 0F00 AND 8080 OR OR SWAP ! ;

: EP0-SEND-PENDING ( max -- )
    EP0-PENDING DUP CELL + @ ROT MIN 40 MIN
    DUP 0 USB-BTABLE-TX# !
    >R
    DUP @ 0 USB-BTABLE-TX R@ >PMA
    R> SWAP /SLICE
    ;

: EP0-SEND-DESCRIPTOR
    EP0-REQ-VALUE1 @ CASE
        1 OF DEVICE$ DUP C@ ELSE
        2 OF CONFIG$ DUP 2 + H@ ELSE
        3 OF EP0-REQ-VALUE0 @ STRING$ DUP C@ ELSE
        NULL$
    ENDCASE
    EP0-PENDING SLICE!  EP0-REQ-LENGTH @ EP0-SEND-PENDING
    3 0 2DUP EP-TX-STATE! EP-RX-STATE!
    ;

: EP0-SEND-0LENGTH-DATA
    0 0 USB-BTABLE-TX# !
    3 0 2DUP EP-TX-STATE! EP-RX-STATE!
    ;

: EP0-SET-ADDRESS-START   EP0-SEND-0LENGTH-DATA ;
: EP0-SET-ADDRESS
    0 EP0-REQ ! EP0-REQ-VALUE0 @ 080 OR USB-DADDR !
    4 1 DO I DUP EP-SET-ADDRESS LOOP
    ;
: EP0-SET-CONFIGURATION   EP0-SEND-0LENGTH-DATA ;
: EP0-SEND-CLASS-RESPONSE   EP0-SEND-0LENGTH-DATA ;

: EP0-SETUP ( -- )
    0 EP-CLEAR-CTR-RX 2 0 2DUP EP-TX-STATE! EP-RX-STATE!
    0 USB-BTABLE-RX
    DUP C@ EP0-REQ-TYPE !   1+ DUP C@ EP0-REQ ! 3 +
    DUP C@ EP0-REQ-VALUE0 ! 1+ DUP C@ EP0-REQ-VALUE1 ! 3 +
    DUP H@ EP0-REQ-INDEX !  4+
        H@ EP0-REQ-LENGTH !
    EP0-REQ @ CASE
         5 OF EP0-SET-ADDRESS-START ELSE
         6 OF EP0-SEND-DESCRIPTOR ELSE
         9 OF EP0-SET-CONFIGURATION ELSE
        20 OF EP0-SEND-CLASS-RESPONSE ELSE
        22 OF EP0-SEND-CLASS-RESPONSE ELSE
        EP0-REQ-TYPE 5 CELLS DUMPW
        EP0-SEND-0LENGTH-DATA
    ENDCASE
    ;

: EP0-HANDLE-IN
    0 EP-CLEAR-CTR-TX
    EP0-REQ @ 5 = IF EP0-SET-ADDRESS THEN
    EP0-PENDING SLICE# IF EP0-REQ-LENGTH @ EP0-SEND-PENDING 3 ELSE 1 THEN 0 EP-TX-STATE!
    1 0 EP-RX-STATE!
    ;

: EP0-HANDLE-OUT
    0 EP-CLEAR-CTR-RX
    1 0 EP-TX-STATE! 1 0 EP-RX-STATE!
    ;

: EP0-HANDLER ( ep dir -- )
    NIP IF USB-EP0R @ 0800 AND IF EP0-SETUP ELSE EP0-HANDLE-OUT THEN
    ELSE EP0-HANDLE-IN
    THEN
    ;

: EP1-TX-START   USB-EP1R @ 0030 AND 3 <> IF 3 1 EP-TX-STATE! THEN ;

: OUT-HANDLER ( ep dir -- )
    2DROP
    3 DUP EP-CLEAR-CTR-RX
    DUP USB-BTABLE-RX
    OVER USB-BTABLE-RX# H@ 3FF AND 0 DO
        DUP C@ CON-RX!
        DUP 1 AND IF 2 + THEN 1+
    LOOP DROP
    3 SWAP EP-RX-STATE!
    ;

: IN-HANDLER ( ep dir -- )
    DROP DUP EP-CLEAR-CTR-TX
    CON-TX# IF DUP CON-TX>PMA 3 SWAP EP-TX-STATE! ELSE USB-BTABLE-TX# 0 SWAP ! THEN
    ;

: USB-TX ( c-addr n -- )
    BEGIN ?DUP WHILE
        BEGIN CON-TX-FULL? WHILE EP1-TX-START WFI REPEAT
        OVER C@ CON-TX! 1- SWAP 1+ SWAP
    REPEAT
    DROP EP1-TX-START
    ;

: USB-EMIT ( c -- )
    BEGIN CON-TX-FULL? WHILE WFI REPEAT
    CON-TX! EP1-TX-START
    ;

: USB
    1 USB-DISC! USB-INIT
    ['] EP0-HANDLER USB-CTR-HANDLERS !
    ['] IN-HANDLER USB-CTR-HANDLERS 1 CELLS + !
    ['] OUT-HANDLER USB-CTR-HANDLERS 3 CELLS + !
    USB-ENABLE
    ;

: USB-CON
    0 UART1 UART-CR1 !
    USB
    ['] USB-EMIT 'EMIT !
    ['] USB-TX 'TYPE !
    ;

: RINGBUF CREATE DUP , 0 , 0 , ALLOT ;
: RINGBUF-EMPTY? 4+ DUP 4+ @ SWAP @ = ;
: RINGBUF-FULL? DUP @ >R 4+ DUP 4+ @ 1+ R> SWAP 1- AND @ = ;
: RINGBUF! DUP >R 4+ 4+ @ 1+ R@ @ 1- AND R> 2DUP 2 CELLS + !  3 CELLS + + ! ;
