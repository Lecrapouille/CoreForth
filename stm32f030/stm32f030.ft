HEX

: REGISTER   CREATE , DOES> @ + ;
: SET-BITS   DUP @ ROT OR SWAP ! ;
: CLEAR-BITS   DUP @ ROT INVERT AND SWAP ! ;

1 CONSTANT HIGH
0 CONSTANT LOW
1 CONSTANT ENABLE
0 CONSTANT DISABLE
1 CONSTANT ON
0 CONSTANT OFF


E000E000 CONSTANT NVIC

40021000 CONSTANT RCC
40021000 CONSTANT RCC-CR
40021004 CONSTANT RCC-CFGR
40021008 CONSTANT RCC-CIR
4002100C CONSTANT RCC-APB2RSTR
40021010 CONSTANT RCC-APB1RSTR
40021014 CONSTANT RCC-AHBENR
40021018 CONSTANT RCC-APB2ENR
4002101C CONSTANT RCC-APB1ENR
40021020 CONSTANT RCC-BDCR
40021024 CONSTANT RCC-CSR
40021028 CONSTANT RCC-AHBRSTR
4002102C CONSTANT RCC-CFGR2

40010800 CONSTANT GPIOA
40010C00 CONSTANT GPIOB
40011000 CONSTANT GPIOC
40011400 CONSTANT GPIOD
40011800 CONSTANT GPIOE
40011C00 CONSTANT GPIOF
40012000 CONSTANT GPIOG
000 REGISTER GPIO-CRL
004 REGISTER GPIO-CRH
008 REGISTER GPIO-IDR
00C REGISTER GPIO-ODR
010 REGISTER GPIO-BSRR
014 REGISTER GPIO-BRR
018 REGISTER GPIO-LCKR

E000E010 CONSTANT STCTRL
E000E014 CONSTANT STRELOAD
E000E018 CONSTANT STCURRENT

40005400 CONSTANT I2C1
40005800 CONSTANT I2C2
004 REGISTER I2C-CR1
008 REGISTER I2C-CR2
00C REGISTER I2C-OAR1
010 REGISTER I2C-OAR2
014 REGISTER I2C-SR1
018 REGISTER I2C-SR2
01C REGISTER I2C-CCR
020 REGISTER I2C-TRISE

40013000 CONSTANT SPI1
40003800 CONSTANT SPI2
000 REGISTER SPI-CR1
004 REGISTER SPI-CR2
008 REGISTER SPI-SR
00C REGISTER SPI-DR
010 REGISTER SPI-CRCPR
014 REGISTER SPI-RXCRCPR
018 REGISTER SPI-TXCRCPR
01C REGISTER SPI-I2SCFGR
020 REGISTER SPI-I2SPR

: APB-ENABLE
    00024000 RCC-APB1ENR SET-BITS   \ UART2 and SPI2
    0000007D RCC-APB2ENR SET-BITS   \ All GPIO ports and AFIO
;

: LED0-ENABLE
    GPIOC GPIO-CRH
    DUP @ FFF0FFFF AND 00050000 OR SWAP ! ;

: LED0!
    CELLS GPIOC GPIO-BSRR + 00001000 SWAP ! ;

: SPI-ENABLE
    40000000 RCC-APB1ENR SET-BITS
    GPIOB GPIO-CRH DUP @ 0000FFFF AND B4B30000 OR SWAP !
    4 SPI2 SPI-CR2 !
    27C SPI2 SPI-CR1 ! ;

: SPI-CS!   CELLS NEGATE GPIOB GPIO-BRR + 00001000 SWAP ! ;

: SPI-RXNE?   SPI2 SPI-SR @ 1 AND ;
: SPI-TXNE?   SPI2 SPI-SR @ 2 AND INVERT ;
: SPI-WAIT-RXNE   SPI2 SPI-SR BEGIN DUP @ 1 AND UNTIL DROP ;
: SPI-WAIT-TXE   SPI2 SPI-SR BEGIN DUP @ 2 AND UNTIL DROP ;
: SPI-DR!@   SPI-WAIT-TXE   SPI2 SPI-DR TUCK !   SPI-WAIT-RXNE   @ ;
: SPI-DR!   SPI-DR!@ DROP ;
: SPI-DR@   SPI-WAIT-RXNE   SPI2 SPI-DR @ ;

: MMC-SPI-MODE
    HIGH SPI-CS!
    0A 0 DO 0FF SPI-DR! LOOP
    LOW SPI-CS! ;

: MMC-CMD
    SWAP DUP 0= 094 AND 1+ -ROT
    40 OR SPI-DR!
    CHEW SPI-DR! SPI-DR! SPI-DR! SPI-DR!
    SPI-DR! ;

: MMC-RES-1
    0FF DUP BEGIN SPI-DR!@ DUP 0FF <> UNTIL SWAP DROP ;

: MMC-INIT
    SPI-ENABLE   MMC-SPI-MODE
    0 0 MMC-CMD MMC-RES-1 DROP
    BEGIN 1 0 MMC-CMD MMC-RES-1 0= UNTIL ;

: MMC-READ-BLK
    200 * 11 SWAP MMC-CMD
    MMC-RES-1 IF 0 EXIT THEN
    MMC-RES-1 0FE <> IF 0 EXIT THEN
    200 0 DO DUP 0FF SPI-DR!@ SWAP C! 1+ LOOP DROP
    0FF DUP SPI-DR! SPI-DR!   \ Drop CRC
    200 ;

: MMC-WRITE-BLK
    200 * 18 SWAP MMC-CMD   MMC-RES-1 DROP  0FF SPI-DR!   \ Seek to sector
    0FE SPI-DR!                                 \ Indicate data start
    200 0 DO DUP C@ SPI-DR! 1+ LOOP DROP        \ Write data
    0FF DUP SPI-DR! SPI-DR!                     \ Dummy CRC
    0FF SPI-DR!@ 1F AND 5 =                     \ Get result
    0FF BEGIN DUP DUP SPI-DR!@ = UNTIL DROP ;   \ Loop until idle

: ((BLOCK)) PAD ;
: (BLOCK)
    2* 2DUP MMC-READ-BLK DROP
    1+ SWAP 200 + SWAP MMC-READ-BLK DROP ;

: (UPDATE)
    2* 2DUP MMC-WRITE-BLK DROP
    1+ SWAP 200 + SWAP MMC-WRITE-BLK DROP ;

